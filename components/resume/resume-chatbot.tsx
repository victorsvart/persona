'use client';

import React, { useState, useRef, useEffect, useCallback } from 'react';
import { UserApplications, UserResume } from '@/prisma/generated/prisma';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import { Send, Bot, User, Loader2, Sparkles } from 'lucide-react';
import { toast } from 'sonner';
import { ContentLoader } from '@/lib/content-loader';

const LOADING_MESSAGES = [
  'Getting everything ready for you...',
  'Analyzing your profile...',
  'Tailoring content to match the job description...',
  'Crafting the perfect resume...',
  'Adding professional touches...',
  'Almost there...',
];

interface Message {
  id: string;
  role: 'user' | 'assistant';
  content: string;
  timestamp: Date;
}

interface LoadingMessageProps {
  messages: string[];
}

const LoadingMessage: React.FC<LoadingMessageProps> = ({ messages }) => {
  const [currentMessageIndex, setCurrentMessageIndex] = useState(0);

  useEffect(() => {
    const interval = setInterval(() => {
      setCurrentMessageIndex((prev) => (prev + 1) % messages.length);
    }, 2500); // Change message every 2.5 seconds

    return () => clearInterval(interval);
  }, [messages.length]);

  return (
    <div className="flex gap-3 justify-start">
      <div className="shrink-0 w-8 h-8 rounded-full bg-primary/10 flex items-center justify-center">
        <Bot className="h-4 w-4 text-primary" />
      </div>
      <div className="bg-muted rounded-lg p-3">
        <div className="flex items-center gap-2 text-sm">
          <Loader2 className="h-4 w-4 animate-spin" />
          <span className="animate-pulse">{messages[currentMessageIndex]}</span>
        </div>
      </div>
    </div>
  );
};

interface ResumeChatbotProps {
  application: UserApplications & {
    resumes?: UserResume[];
  };
  onResumeGenerated: (content: string) => void;
  isGenerating: boolean;
  setIsGenerating: (generating: boolean) => void;
}

export const ResumeChatbot: React.FC<ResumeChatbotProps> = ({
  application,
  onResumeGenerated,
  isGenerating,
  setIsGenerating,
}) => {
  const [messages, setMessages] = useState<Message[]>([]);
  const [inputValue, setInputValue] = useState('');
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const inputRef = useRef<HTMLInputElement>(null);
  const hasAutoGeneratedRef = useRef(false);

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  useEffect(() => {
    inputRef.current?.focus();
  }, []);

  const chatbot_response = [
    "Here's your résumé!",
    "Here's your generated résumé!",
    'Your résumé is ready — check it out below!',
    'All done! Heres the résumé I created for you.',
    'Your custom résumé has been generated — take a look!',
  ];

  // placeholder messages. TODO: Change to model generated message in the future.
  const selectRandomChatbotResponse = (): string => {
    return chatbot_response[
      Math.floor(Math.random() * chatbot_response.length - 1)
    ];
  };

  const handleAutoGenerateResume = useCallback(async () => {
    setIsGenerating(true);

    try {
      const response = await fetch('/dashboard/resume/generate', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          applicationId: application.id,
          userMessage:
            'Generate a professional resume tailored for this position',
          userExperience: {
            // TODO: Add user experience data from profile
            professional_summary: '',
            work_experience: [],
            skills: [],
            education: [],
          },
          conversationHistory: [],
          stream: false, // Disable streaming
        }),
      });

      const data = await response.json();

      // Add the assistant's message
      const assistantMessage: Message = {
        id: Date.now().toString(),
        role: 'assistant',
        content: selectRandomChatbotResponse(),
        timestamp: new Date(),
      };
      setMessages((prev) => [...prev, assistantMessage]);

      // Generate and save the resume
      if (data.resumeContent) {
        onResumeGenerated(data.resumeContent);
      }
    } catch (error) {
      console.error('Error auto-generating resume:', error);
      const errorMessage =
        error instanceof Error
          ? error.message
          : 'Failed to generate initial resume';
      toast.error(errorMessage);

      // Add error message
      const errorMsg: Message = {
        id: Date.now().toString(),
        role: 'assistant',
        content: `I apologize, but I encountered an error: ${errorMessage}. Please try again or contact support if the issue persists.`,
        timestamp: new Date(),
      };
      setMessages((prev) => [...prev, errorMsg]);
    } finally {
      setIsGenerating(false);
    }
  }, [application.id, onResumeGenerated, setIsGenerating]);

  // Initialize with welcome message and conditionally auto-generate initial resume
  useEffect(() => {
    // Early return if already initialized or currently generating
    if (messages.length > 0 || hasAutoGeneratedRef.current) {
      return;
    }

    // Mark as triggered immediately to prevent race conditions
    hasAutoGeneratedRef.current = true;

    const loadWelcomeMessage = async () => {
      try {
        // Only auto-generate if there are NO existing resumes
        const hasExistingResumes =
          application.resumes && application.resumes.length > 0;

        const welcomeTemplate = await ContentLoader.loadWelcomeMessage();
        let welcomeContent = ContentLoader.replacePlaceholders(
          welcomeTemplate,
          {
            ROLE: application.role,
            COMPANY_NAME: application.company_name,
          },
        );

        // Add a note if there are existing resumes
        if (hasExistingResumes && application.resumes) {
          welcomeContent += `\n\nI see you already have ${
            application.resumes.length
          } resume${
            application.resumes.length > 1 ? 's' : ''
          } for this application. You can ask me to generate a new version, make changes to the existing one, or refine specific sections. How can I help you today?`;
        }

        const welcomeMessage: Message = {
          id: 'welcome',
          role: 'assistant',
          content: welcomeContent,
          timestamp: new Date(),
        };
        setMessages([welcomeMessage]);

        if (!hasExistingResumes) {
          // Auto-generate initial resume after a short delay
          setTimeout(() => {
            handleAutoGenerateResume();
          }, 1500);
        }
      } catch (error) {
        console.error('Error loading welcome message:', error);

        // Fallback to hardcoded message
        const hasExistingResumes =
          application.resumes && application.resumes.length > 0;
        let fallbackContent = `Hello! I'm here to help you create a tailored resume for your ${application.role} position at ${application.company_name}.`;

        if (hasExistingResumes && application.resumes) {
          fallbackContent += `\n\nI see you already have ${
            application.resumes.length
          } resume${
            application.resumes.length > 1 ? 's' : ''
          } for this application. You can ask me to generate a new version or make changes to the existing one.`;
        }

        const welcomeMessage: Message = {
          id: 'welcome',
          role: 'assistant',
          content: fallbackContent,
          timestamp: new Date(),
        };
        setMessages([welcomeMessage]);

        // Only auto-generate for new applications
        if (!hasExistingResumes) {
          setTimeout(() => {
            handleAutoGenerateResume();
          }, 1500);
        }
      }
    };

    loadWelcomeMessage();
    // Only depend on application.id to avoid unnecessary re-runs when application object reference changes
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  const handleSendMessage = async () => {
    if (!inputValue.trim() || isGenerating) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      role: 'user',
      content: inputValue.trim(),
      timestamp: new Date(),
    };

    setMessages((prev) => [...prev, userMessage]);
    const currentInput = inputValue.trim();
    setInputValue('');
    setIsGenerating(true);

    try {
      // Build conversation history from messages (exclude welcome message)
      const conversationHistory = messages
        .filter((msg) => msg.id !== 'welcome')
        .map((msg) => ({
          role: msg.role,
          content: msg.content,
        }));

      // Call the API without streaming
      const response = await fetch('/dashboard/resume/generate', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          applicationId: application.id,
          userMessage: currentInput,
          userExperience: {
            // TODO: Add user experience data from profile
            professional_summary: '',
            work_experience: [],
            skills: [],
            education: [],
          },
          conversationHistory,
          stream: false, // Disable streaming
        }),
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(errorData.error || 'Failed to process your request');
      }

      const data = await response.json();

      // Add the assistant's message
      const assistantMessage: Message = {
        id: Date.now().toString(),
        role: 'assistant',
        content: selectRandomChatbotResponse(),
        timestamp: new Date(),
      };
      setMessages((prev) => [...prev, assistantMessage]);

      // If the response includes resume content, pass it to the parent
      if (data.resumeContent) {
        onResumeGenerated(data.resumeContent);
      }

      // Show suggestions if available
      if (data.suggestions && data.suggestions.length > 0) {
        console.log('Resume suggestions:', data.suggestions);
      }
    } catch (error) {
      console.error('Error sending message:', error);
      const errorMessage =
        error instanceof Error ? error.message : 'Failed to send message';
      toast.error(errorMessage);

      // Add error message
      const errorMsg: Message = {
        id: Date.now().toString(),
        role: 'assistant',
        content: `I apologize, but I encountered an error: ${errorMessage}. Please try again.`,
        timestamp: new Date(),
      };
      setMessages((prev) => [...prev, errorMsg]);
    } finally {
      setIsGenerating(false);
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  const formatTime = (date: Date) => {
    return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
  };

  return (
    <div className="flex flex-col h-full">
      {/* Messages */}
      <div className="flex-1 overflow-y-auto p-4 space-y-4">
        {messages.map((message) => (
          <div
            key={message.id}
            className={`flex gap-3 ${
              message.role === 'user' ? 'justify-end' : 'justify-start'
            }`}
          >
            {message.role === 'assistant' && (
              <div className="flex-shrink-0 w-8 h-8 rounded-full bg-primary/10 flex items-center justify-center">
                <Bot className="h-4 w-4 text-primary" />
              </div>
            )}
            <div
              className={`max-w-[80%] ${
                message.role === 'user'
                  ? 'bg-primary text-primary-foreground'
                  : 'bg-muted'
              } rounded-lg p-3`}
            >
              <div className="whitespace-pre-wrap text-sm">
                {message.content}
              </div>
              <div
                className={`text-xs mt-1 ${
                  message.role === 'user'
                    ? 'text-primary-foreground/70'
                    : 'text-muted-foreground'
                }`}
              >
                {formatTime(message.timestamp)}
              </div>
            </div>
            {message.role === 'user' && (
              <div className="flex-shrink-0 w-8 h-8 rounded-full bg-primary flex items-center justify-center">
                <User className="h-4 w-4 text-primary-foreground" />
              </div>
            )}
          </div>
        ))}
        {isGenerating && <LoadingMessage messages={LOADING_MESSAGES} />}
        <div ref={messagesEndRef} />
      </div>

      {/* Input */}
      <div className="border-t p-4">
        <div className="flex gap-2">
          <Input
            ref={inputRef}
            value={inputValue}
            onChange={(e) => setInputValue(e.target.value)}
            onKeyPress={handleKeyPress}
            placeholder="Ask me anything about your resume..."
            disabled={isGenerating}
            className="flex-1"
          />
          <Button
            onClick={handleSendMessage}
            disabled={!inputValue.trim() || isGenerating}
            size="sm"
            className="px-3"
          >
            {isGenerating ? (
              <Loader2 className="h-4 w-4 animate-spin" />
            ) : (
              <Send className="h-4 w-4" />
            )}
          </Button>
        </div>
        <div className="flex items-center gap-2 mt-2">
          <Badge variant="outline" className="text-xs">
            <Sparkles className="h-3 w-3 mr-1" />
            AI Powered
          </Badge>
          <span className="text-xs text-muted-foreground">
            Powered by ChatGPT
          </span>
        </div>
      </div>
    </div>
  );
};
