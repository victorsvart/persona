// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../prisma/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["auth", "public"]
}

model User {
  id                            String                       @id
  name                          String
  email                         String
  emailVerified                 Boolean                      @default(false)
  image                         String?
  createdAt                     DateTime                     @default(now())
  updatedAt                     DateTime                     @default(now()) @updatedAt
  sessions                      Session[]
  accounts                      Account[]
  user_professional_summary     UserProfessionalSummary?
  user_professional_experiences UserProfessionalExperience[]
  user_academic_information     UserAcademicInformation[]
  user_skill                    UserSkill?
  username                      String?
  displayUsername               String?

  @@unique([email])
  @@unique([username])
  @@map("user")
  @@schema("auth")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
  @@schema("auth")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
  @@schema("auth")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
  @@schema("auth")
}

model UserProfessionalExperience {
  id            String    @id @default(uuid())
  institution   String
  role          String
  start_date    DateTime?
  end_date      DateTime?
  summary       String?
  version       Int       @default(1)
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  at_university Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("user_professional_experience")
  @@schema("public")
}

model UserProfessionalSummary {
  id               String   @id @default(uuid())
  experience_years Int
  summary          String?
  version          Int      @default(1)
  userId           String   @unique
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("user_professional_summary")
  @@schema("public")
}

model UserAcademicInformation {
  id          String    @id @default(uuid())
  institution String
  major       String
  start_date  DateTime
  end_date    DateTime?
  summary     String?
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("user_academic_information")
  @@schema("public")
}

model UserSkill {
  id        Int      @id @default(autoincrement())
  skills    String
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user_skill")
  @@schema("public")
}
